---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: infrasructure-provision-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "false"
    - name: terraform-cmd
      description: (optional) Pattern will only apply when set to apply
      default: "apply"
    - name: schematics-wksp
      description: The schematics workspace name 
      default: ""

  results:
    - name: apply-output
      description: output of "terraform apply"
    - name: status
      description: success or failure status of "terraform apply"
  stepTemplate:
    envFrom:
    - configMapRef:
        name: environment-properties
    - secretRef:
        name: secure-properties
    env:
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: REPOSITORY
        value: $(params.repository)
      - name: TF_VAR_ibmcloud_api_key
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: IBMCLOUD_API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: TERRAFORM_CMD
        value: "$(params.terraform-cmd)"
      - name: SCHEMATICS_WKSP
        value: "$(params.schematics-wksp)"
  steps:
    - name: workspace-create
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash -e

          if [[ "${PIPELINE_DEBUG}" == "true" ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          cat /cd-config/toolchain.json

          cd /artifacts 

          ibmcloud config --check-version=false
          ibmcloud login --apikey ${TF_VAR_ibmcloud_api_key} --no-region
        
          #Search to see if workspace exists 
          echo "Verifying if schematics workspace ${SCHEMATICS_WKSP} exists"
          ibmcloud terraform workspace list | grep $SCHEMATICS_WKSP
          if [[ $? -eq 1 ]]; then 
             echo "Creating schematics workspace ${SCHEMATICS_WKSP}"
             sed -i'' "s/<IBMCLOUD_API_KEY>/${TF_VAR_ibmcloud_api_key}/" schematics.json
             sed -i'' "s/<WORKSPACE_NAME>/${SCHEMATICS_WKSP}/" schematics.json
             sed -i'' "s,<SCHEMATICS_REPOSITORY>,${REPOSITORY}," schematics.json

             GIT_CREDENTIALS_FILE="/artifacts/git-credentials.json"
             #Retrieve the GIT token
             if [ ! -f "${GIT_CREDENTIALS_FILE}" ]; then
               echo "$GIT_CREDENTIALS_FILE does not exist."
             fi
             GIT_TOKEN=$(cat $GIT_CREDENTIALS_FILE | jq -r .GIT_TOKEN)

             ibmcloud terraform workspace new --github-token "${GIT_TOKEN}" --file schematics.json
          else 
             echo "Schematics workspace ${SCHEMATICS_WKSP} already exists"
          fi 

          echo "Retrieving workspace id"
          ibmcloud terraform workspace list
          OUTPUT=$(ibmcloud terraform workspace list --output json | jq ".workspaces[] | select(.name==\"$SCHEMATICS_WKSP\")")
          echo $OUTPUT
          if [[ $? -ne 0 || "XX_" == "XX_${OUTPUT}" ]]; then 
            echo "Unable to find workspace name ${SCHEMATICS_WKSP}"
            exit 1
          fi 

          WORKSPACE_ID=$(echo "${OUTPUT}" | jq -r .id)
          echo "Workspace $WORKSPACE_ID"

          # make sure workspace is not locked / frozen
          # poll until locked/frozen is no longer true or if there is an error or timeout of ~30 secs
          i="0"
          while :
          do
            STATUS=$(ibmcloud schematics workspace get --id $WORKSPACE_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS
              exit $RET_VAL
            else
              LOCKED_VALUE=$(echo $STATUS | jq -r ".workspace_status.locked")
              FROZEN_VALUE=$(echo $STATUS | jq -r ".workspace_status.frozen")
              echo "Polling for status => Locked : $LOCKED_VALUE ; Frozen: $FROZEN_VALUE"
              if [ "$LOCKED_VALUE" = "false" -a "$FROZEN_VALUE" = "false" ]; then 
                echo $STATUS
                break
              elif [ $i -gt 5  ]; then  
                exit 1
              fi
              i=$[$i+1]
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
      volumeMounts:
        - mountPath: /config
          name: cd-config-volume

    - name: workspace-pull-latest
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          REGION="--no-region"
         
          # force login (required by schematics cli)
          ibmcloud login --apikey $TF_VAR_ibmcloud_api_key $REGION

          echo "Retrieving workspace id"
          ibmcloud terraform workspace list
          OUTPUT=$(ibmcloud terraform workspace list --output json | jq ".workspaces[] | select(.name==\"$SCHEMATICS_WKSP\")")
          echo $OUTPUT
          if [[ $? -ne 0 || "XX_" == "XX_${OUTPUT}" ]]; then 
            echo "Unable to find workspace name ${SCHEMATICS_WKSP}"
            exit 1
          fi 

          WORKSPACE_ID=$(echo "${OUTPUT}" | jq -r .id)
          echo "Workspace $WORKSPACE_ID"

          # run schematics update
          echo "ibmcloud schematics workspace update --id $WORKSPACE_ID --pull-latest --json"
          ibmcloud schematics workspace update --id $WORKSPACE_ID --pull-latest --json
          # poll until locked/frozen is no longer true or if there is an error or timeout of ~30 secs
          i="0"
          while :
          do
            STATUS=$(ibmcloud schematics workspace get --id $WORKSPACE_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS
              exit $RET_VAL
            else
              LOCKED_VALUE=$(echo $STATUS | jq -r ".workspace_status.locked")
              FROZEN_VALUE=$(echo $STATUS | jq -r ".workspace_status.frozen")
              echo "Polling for status => Locked : $LOCKED_VALUE ; Frozen: $FROZEN_VALUE"
              if [ "$LOCKED_VALUE" = "false" -a "$FROZEN_VALUE" = "false" ]; then 
                echo $STATUS
                break
              elif [ $i -gt 5  ]; then  
                exit 1
              fi
              i=$[$i+1]
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
          
      volumeMounts:
        - mountPath: /config
          name: cd-config-volume

    - name: workspace-refresh
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          REGION="--no-region"
         
          # force login (required by schematics cli)
          ibmcloud login --apikey $TF_VAR_ibmcloud_api_key $REGION

          echo "Retrieving workspace id"
          ibmcloud terraform workspace list
          OUTPUT=$(ibmcloud terraform workspace list --output json | jq ".workspaces[] | select(.name==\"$SCHEMATICS_WKSP\")")
          echo $OUTPUT
          if [[ $? -ne 0 || "XX_" == "XX_${OUTPUT}" ]]; then 
            echo "Unable to find workspace name ${SCHEMATICS_WKSP}"
            exit 1
          fi 

          WORKSPACE_ID=$(echo "${OUTPUT}" | jq -r .id)
          echo "Workspace $WORKSPACE_ID"

          # run terraform refresh
          echo "ibmcloud schematics refresh --id $WORKSPACE_ID "
          ACTIVITY=$(ibmcloud schematics refresh -id $WORKSPACE_ID --json)
          ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
          echo "Activity ID   $ACTIVITY_ID"
          # poll until status is no longer INPROGRESS, or if there is an error
          error_count=0
          while :
          do
            STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS

              error_count=$((error_count + 1))
              if [ $error_count -gt 5 ]; then
                exit $RET_VAL
              fi
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "FAILED" ]; then 
                ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
                exit 1
              elif [ "$STATUS_VALUE" != "INPROGRESS" ] && [ "$STATUS_VALUE" != "CREATED" ]; then  
                break
              fi
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
          
          ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
      volumeMounts:
        - mountPath: /config
          name: cd-config-volume

    - name: workspace-plan
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          REGION="--no-region"
         
          # force login (required by schematics cli)
          ibmcloud login --apikey $TF_VAR_ibmcloud_api_key $REGION

          echo "Retrieving workspace id"
          ibmcloud terraform workspace list
          OUTPUT=$(ibmcloud terraform workspace list --output json | jq ".workspaces[] | select(.name==\"$SCHEMATICS_WKSP\")")
          echo $OUTPUT
          if [[ $? -ne 0 || "XX_" == "XX_${OUTPUT}" ]]; then 
            echo "Unable to find workspace name ${SCHEMATICS_WKSP}"
            exit 1
          fi 

          WORKSPACE_ID=$(echo "${OUTPUT}" | jq -r .id)
          echo "Workspace $WORKSPACE_ID"

          # run terraform plan
          echo "ibmcloud terraform plan --id $WORKSPACE_ID"
          ACTIVITY=$(ibmcloud terraform plan -id $WORKSPACE_ID --json)
          ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
          echo "Activity ID   $ACTIVITY_ID"
          # poll until status is no longer INPROGRESS, or if there is an error
          error_count=0
          while :
          do
            STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS

              error_count=$((error_count + 1))
              if [ $error_count -gt 5 ]; then
                exit $RET_VAL
              fi
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "FAILED" ]; then 
                ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
                exit 1
              elif [ "$STATUS_VALUE" != "INPROGRESS" ] && [ "$STATUS_VALUE" != "CREATED" ]; then  
                break
              fi
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
          ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
      volumeMounts:
        - mountPath: /config
          name: cd-config-volume

    - name: workspace-apply
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          if [[ "${TERRAFORM_CMD}" != "apply" ]]; then 
            echo "terraform-cmd doesn't equal apply.  Please set to apply if you wish to apply the terraform plan"
            exit 0;
          fi

          REGION="--no-region"
         
          # force login (required by schematics cli)
          ibmcloud login --apikey $TF_VAR_ibmcloud_api_key $REGION

          echo "Retrieving workspace id"
          ibmcloud terraform workspace list
          OUTPUT=$(ibmcloud terraform workspace list --output json | jq ".workspaces[] | select(.name==\"$SCHEMATICS_WKSP\")")
          echo $OUTPUT
          if [[ $? -ne 0 || "XX_" == "XX_${OUTPUT}" ]]; then 
            echo "Unable to find workspace name ${SCHEMATICS_WKSP}"
            exit 1
          fi 

          WORKSPACE_ID=$(echo "${OUTPUT}" | jq -r .id)
          echo "Workspace $WORKSPACE_ID"
         
          # run terraform apply
          echo "ibmcloud terraform apply --id $WORKSPACE_ID --force"
          ACTIVITY=$(ibmcloud terraform apply -id $WORKSPACE_ID --json --force)
          ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
          echo "Activity ID   $ACTIVITY_ID"
          # poll until status is no longer INPROGRESS, or if there is an error
          error_count=0
          while :
          do
            STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS

              error_count=$((error_count + 1))
              if [ $error_count -gt 5 ]; then
                exit $RET_VAL
              fi
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "FAILED" ]; then
                ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
                exit 1
              elif [ "$STATUS_VALUE" == "CREATED" ]; then  
                continue
              elif [ "$STATUS_VALUE" != "INPROGRESS" ]; then  
                break
              fi
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
          ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
      volumeMounts:
        - mountPath: /config
          name: cd-config-volume

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets
  volumes:
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
